//SPDX-License-Identifier: Unlicense
pragma solidity 0.8.12;

import "./interfaces/ILendingPool.sol";
import "./GetSponsorETH.sol";
import "./utils/Ownable.sol";
import "./interfaces/IERC20.sol";

contract SponsoredPools is Ownable {
    GetSponsorETH public sponsorEth;
    address public beneficiary;
    ILendingPool public lendingPool;

    // supporter => amount
    mapping(address => uint256) public supporters;
    // token => supporter => amount
    mapping(address => mapping(address => uint)) tokensStaked;
    mapping(address => uint) totalStaked;

    function init(
        ILendingPool _lendingPool,
        address _sponsorEth,
        address _beneficiary
    ) public {
        require(beneficiary == address(0), "already initialized");

        sponsorEth = GetSponsorETH(_sponsorEth);
        beneficiary = _beneficiary;
        lendingPool = _lendingPool;
    }

    // Stakes the sent tokens
    function stake(
        address supporter,
        address token,
        uint amount
    ) public payable onlyOwner {
        tokensStaked[token][supporter] += amount;
        totalStaked[token] += amount;
    }

    // Unstake tokens for supporter
    function unstake(address supporter, address token) public onlyOwner {
        uint unstakeAmount = tokensStaked[token][supporter];
        require(unstakeAmount > 0, "no stake");
        tokensStaked[token][supporter] = 0;
        totalStaked[token] -= unstakeAmount;
        lendingPool.withdraw(token, unstakeAmount, supporter);
    }

    // claim yield generated by stake
    function claim(address token, address aToken) public onlyOwner {
        uint256 amount = claimable(token, aToken);
        lendingPool.withdraw(token, amount, beneficiary);
    }

    // claimable returns total stake claimable
    function claimable(address token, address aToken)
        public
        view
        returns (uint256 claimAmount)
    {
        uint total = totalStaked[token];
        uint aBalance = IERC20(aToken).balanceOf(address(this));
        claimAmount = aBalance - total;
    }
}
